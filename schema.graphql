type Query {
    bookings(find: BookingParams= {}): [Booking]
}

type Booking {
    _id: String
    locationStartId: String
    startDate: String
    endDate: String
    type: String
    state: String
    created: String
    estimatedDistance: Float
    startMileage: Float
    endMileage: Float
    cost: Float

    # Nested data
    user: User
    vehicle: Vehicle
    company: Company
    location: Location
}

type User {
    _id: String
    firstname: String
    lastname: String
    email: String
    permissions: [String]
}

type Vehicle {
    _id: String
    vin: String
    numberPlate: String
    brand: String
    model: String
    mileage: Float
}

type Company {
    _id: String
    name: String
    features: [String]
    language: String
    adminGroup: String
}

type Location {
    _id: String
    name: String
    streetName: String
    streetNumber: String
    postcode: String
    city: String
    timezone: String
}

input BookingParams {
    limit: String = "10"
    page: String = "1"
    sort: Sort = created
}

enum Sort {
    created
    startDate
    endDate
}